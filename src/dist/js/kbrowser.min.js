(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
class Remote {
      constructor(url) {
            this.url = url
      }

      async get(options = {}) {
            return await fetch(this.url, {
                  method: "GET",
                  ...options
            }).then((r) => {
                  if (!r) {
                      throw new Error("An error occurred in the api, check the log of the response.")  
                  }

                  return r.json()
            }).then((data) => data).catch((err) => {
                  return err.message
            })
      }

      async post(options = {}) {
            return await fetch(this.url, {
                  method: "POST",
                  ...options
            }).then((r) => {
                  if (!r) {
                      throw new Error("An error occurred in the api, check the log of the response.")  
                  }

                  return r.json()
            }).then((data) => data).catch((err) => {
                  return err.message
            })
      }

      async post(options = {}) {
            return await fetch(this.url, {
                  method: "POST",
                  ...options
            }).then((r) => {
                  if (!r) {
                      throw new Error("An error occurred in the api, check the log of the response.")  
                  }

                  return r.json()
            }).then((data) => data).catch((err) => {
                  return err.message
            })
      }


      async put(options = {}) {
            return await fetch(this.url, {
                  method: "PUT",
                  ...options
            }).then((r) => {
                  if (!r) {
                      throw new Error("An error occurred in the api, check the log of the response.")  
                  }

                  return r.json()
            }).then((data) => data).catch((err) => {
                  return err.message
            })
      }

      async delete(options = {}) {
            return await fetch(this.url, {
                  method: "DELETE",
                  ...options
            }).then((r) => {
                  if (!r) {
                      throw new Error("An error occurred in the api, check the log of the response.")  
                  }

                  return r.json()
            }).then((data) => data).catch((err) => {
                  return err.message
            })
      }
}

class Kquery {
      constructor(elements) {
            this.elements = [elements]
      }

      load(fn) {
            document.addEventListener('DOMContentLoaded', fn)
            return
      }

      getElements() {
            const el = document.querySelectorAll(this.elements)
            return el
      }

      event(event, callback) {
            const ev = this.getElements().forEach(el => el.addEventListener(event, callback))
            return ev
      }
      
      remote(url) {
            return new Remote(url)
      }
}

const $ = (el) => new Kquery(el)
},{}]},{},[1]);
